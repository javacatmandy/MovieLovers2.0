package MovieLovers20;

import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.bind.BindResult;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import javax.naming.Binding;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

@Controller
public class AppController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired// This means to get the bean called reviewPostRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ReviewPostRepository reviewPostRepository;
    //private int myuser;


    //*************** render a view to show all user account info on admin_page for manage ***************************
    //@GetMapping map "/admin_page" with the method getAllUser()
    //add a list of all instances of User class to the model, later we can access through the thymeleaf admin_page.html file
    //create that html file, named "admin_page"
    @GetMapping("/admin_page")
    public String getAllUser(Model model) {
        model.addAttribute("userList", userRepository.findAll());
        return "admin_page";
    }

    //************************ handle delete of user account in admin-page ****************************************
    @GetMapping("admin_page/{userId}")//operate delete by value of userId, and mapping the correspondance url with userID
    public String deleteUser(@PathVariable(value="userId") Integer userId) {
        userRepository.deleteById(userId);
        return "redirect:/admin_page"; //return to /admin_page url after deleted to show the left again
    }
    //**************************** handle log in *****************************************
    @GetMapping("/login") // render a form view on login.html page
    public  String loginForm( Model model){
        model.addAttribute("user", new User());//add a new instance of User class to store the input data
        return "login";
    }

    @PostMapping("/login")
    public String submitLogin(@ModelAttribute("user") User user, Model model){
        //System.out.println("******************* i am user obj" + user);
        String password = encryptPW(user.getPassword()); // call the helper function to encrypt the input password
        user = userRepository.findByPasswordAndEmail(password,user.getEmail());//query from database to validate
        //model.addAttribute("user", user);//no use anymore

        if(user != null){
            //check the userType and reder to the different page, user page or admin page
            if(user.getUserType().equals("Admin")){
                //userType = "Admin";
                //System.out.println("****** I am admin ***********************");
                //model.addAttribute("userList", userRepository.findAll());
                //return "admin_page";
                return "redirect:/admin_page";
            }
            else{
                //userType = "User";
                //System.out.println("****** i am user ***********************");
                //return "user_page";
                return "redirect:/my_reivews"; // //my_reivews
            }
        }
        else{
            return "login-fail";
        }
    }
    //************ manage user info in admin page ****************
//    @GetMapping("/login/{id}")
//    public String deleteUser(@PathVariable(value="id") Integer userId) {
//        userRepository.deleteById(userId);
//        return "admin_page";
//        //return "user_my_reviews";
//    }
    /*
    @GetMapping("/pathvars/single/{id}")
    public String singlePathVariable(@PathVariable("id") int id, Model model) {
        if (id == 1) {
            model.addAttribute("item", new Item(1, "First Item"));
        } else {
            model.addAttribute("item", new Item(2, "Second Item"));
        }

        return "pathvariables/view";
    }
     */
    //********************* Handle delete and update the user **********************
    //Delete a user
//    @GetMapping("/delete_user/{id}")
//    public String deleteUser(@PathVariable(value="id") Integer userId) {
//        boolean exists = userRepository.existsById(userId);
////        if (!exists) {
////            throw new IllegalStateException("user with id " + userId + " does not exists.");
////        }
//        userRepository.deleteById(userId);
//        //return "redirect:/listAllTheUsers";
//        //return "redirect:/login";
//        return "admin_page";
//    }

    //********************* Handle the signup function *****************************************
    @GetMapping("/signup")
    public String signupForm( Model model){//use a Model object to expose a new form to the view template.
        model.addAttribute("user", new User());
        return "signup";
    }
    @PostMapping("/signup")
    public String submitForm(@Valid @ModelAttribute("user") User user, BindingResult bindingResult){
        if(bindingResult.hasErrors()) {
            //@Valid with bindingResult instance for sign up input validation
            //show error in the same page;
            return "signup";
        }
        else{
            user.setPassword(encryptPW(user.getPassword()));//call helper function to encrypt the sign up password
            userRepository.save(user);//save the new user account into database
            return "register_success";//return the successful notice page
        }
    }
    //*********** helper function of password encryption ************
    public String encryptPW(String pass) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] messageDigest = md.digest(pass.getBytes());
            BigInteger no = new BigInteger(1, messageDigest);
            String hashtext = no.toString(16);
            while (hashtext.length() < 32) {
                hashtext = "0" + hashtext;
            }
            return hashtext;
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }

    //*************** handling the post ******************
        //list all reviews posted in my_reivews for view and edit
        @GetMapping("/my_reivews")
        public String getAllPost(Model model) {
            model.addAttribute("reviewList", reviewPostRepository.findAll());
            return "user_my_reviews";
        }
        //request to add new post
        @GetMapping("/add_review")
        public String reviewForm( Model model){//use a Model object to expose a new form to the view template.
            model.addAttribute("reviewpost", new ReviewPost());
            return "add_review";
        }
        //save the new post to database
        //show all again
        @PostMapping("/add_review")
        public String postReview(@ModelAttribute("reviewpost") ReviewPost reviewpost, Model model){
                reviewPostRepository.save(reviewpost);
                model.addAttribute("reviewList", reviewPostRepository.findAll());
                return "redirect:/my_reivews";
        }

        //delete a review
        @GetMapping("delete_review/{id}")//mapping the url with the operate post id
        //by using @PathVariable to assign the value to the concanated {id} of url
        public String deleteReview(@PathVariable(value="id") Integer reviewId) {
            reviewPostRepository.deleteById(reviewId);
            return "redirect:/my_reivews";
            //return "user_my_reviews";
        }
        //update a review
        @GetMapping("/update_review/{id}")
        public String  updateReview(@PathVariable(value="id") Integer reviewId,
                                  Model model)   {
            ReviewPost review = reviewPostRepository.findById(reviewId) // find the post want to updat by id
                    .orElseThrow(()-> new IllegalStateException( // throw exception when the id doesn't exist
                            "user with id" + reviewId + "does not exists."
                    ));
            model.addAttribute("review", review);//bind the data of found review obj to model
            return "update_review";
        }
        @PostMapping("/update_review/{id}")
        public String saveUpdate(@ModelAttribute("review") ReviewPost review, Model model) {
            reviewPostRepository.save(review);//save the updated data of the obj into database
            //model.addAttribute("reviewList", reviewPostRepository.findAll());
            return "redirect:/my_reivews";
        }

}//controller
